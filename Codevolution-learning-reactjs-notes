=> requirements node js, editor(visual studio)

=> create react project
	a. # npx create-react-app <project name>
	b. # npm install create-react-app -g
	c. # create-react-app <project-name>

What is npx -> npm package runner.

=> to run react project
	# npm start

=> index.html file is the only file your going to have in your react js project. In this file we have a div with id 'root' for rendering complete project.
=> if you run 'npm start' command in terminal index.html page will serve you.

Components
==========
=> Components descrive a part of the user interface.
=> They are reusable and can be nested inside other components.

Types:
  1. Stateless Functional Components
      a. Javascript Functions
          Ex: function Welcome(props){ return <h1>Hello, {props.name}</h1>; }
  2. Stateful Components
      a. Class extending component class
      b. Render method returning HTML
          Ex: class Welcome extends React.Component{ render(){ return <h1>Hello, {this.props.name}</h1>; } }

Functional Components
======================
Example
-------
normal
  import React from 'react'
  function Greet() { return ( <div> fgsdfgsdfgsdfg </div> ) }
  export default Greet

with arrow function 
  const Greet = () => <h1>asdfasfasdf</h1> export default Greet

Class components
================
import React, {Component} from 'react'
class Welcome extends Component{
  render(){ return <h1> Class component </h1> }  
}
export default Welcome

Function components vs Class components
=======================================
Fucntional
----------
1. Simple functions
2. Use Func components as much as possible
3. Absence of 'this' keyword
4. Solution without using state
5. Mainly responsible for the UI
6. Stateless/ Dumb / Presentational

Class
-----
1. More feature rich
2. Maintain their own private data - state
3. Complex UI logic
4. Provide lifecycle hooks
5. Stateful / Smart / Container

Hooks
=====
=> No breaking changes
=> Completely opt-in & 100% backwards-compatible.
=> What ever we've learned so far in this series still holds good
=> Components types - Functional components and Class components
=> Using state, lifecycle methods and 'this' bonding
=> After understanding state, event binding and lifecycle hooks in class components

JSX
===
1. Javascript XML(JSX) - Extension to the JavaScript language syntax.
2. Write XML - like code for elements and components
3. JSX tags have a tag name, attributes and children
4. JSX is not a necessity to write React applications
5. JSX makes your react code simpler and elegant
6. JSX ultimately transpiles to pure JavaScript which is understood by the browsers

react component with jsx
------------------------
Greet.js
--------
import React from 'react'
const Greet = () => {
    return React.createElement(
        'div',
        {id: 'hello', className: 'dummyClass'},
        React.createElement('h1', null, 'Hello Vishwas')
    )
}

export default Greet

JSX differences
---------------
class - className
for - htmlFor
camelCase property naming convension
  onclick - onClick
  tabindex - tabIndex

PRoPERTIES (Props)
==================
=> Props are immutable (value cannot be changed once assigned).
Example: 
import './App.css';
import Greet from './components/Greet';
function App() {
  return (
    <div className="App">
       <Greet name="madhu" project="iti"/>
       <Greet name="praneeth" project="dca"/>
       <Greet name="srinivas" project="apbocwwb"/>
       
    </div>
  );
}
import React from 'react'
const Greet = props => {
    return <h1> Hello {props.name}, working on project {props.project}</h1>
}
export default Greet

STATE
=====
props vs state
--------------
Props
  a. props get passed to the component
  b. Function parameters
  c. props are immutable
  d. props - Functional Components, this.props - Class Components
State
  a. state is managed within the component
  b. Variables declared in the function body
  c. state can be changed
  d. useState Hook - Functional Components, this.state - Class Components

Example:
import React, { Component } from "react";
class Message extends Component{
constructor(){
    super()
    this.state = {
        message: 'Welcome Visitor'
    }
}
changeMessage(){
    this.setState({
        message: 'Thanks for subscribe'
    })
}
    render(){
        return (
            <div>
            <h1>{this.state.message}</h1>
            <button onClick={()=>this.changeMessage()}>Subscribe</button>
            </div>
        )
    }
}
export default Message

setState
********
1. Always make use of setState and never modify the state directly
2. Code has to be executed after the state has been updated? 
    Place that code in the call back function which is the second argument to the setState method
3. When you have to update state based on the previous state value, pass in a function as an argument
    instead of the regular object.

import React, { Component } from 'react'

export class Counter extends Component {

    constructor(props) {
      super(props)
    
      this.state = {
         count: 0
      }
    }
    
    increment(){
        //this.setState({
       //     count: this.state.count + 1
       // },()=> console.log('last value is', this.state.count))
       this.setState(prevState => ({
        count: prevState.count + 1
       }))
    }
    incrementFive(){
        this.increment()
        this.increment()
        this.increment()
        this.increment() 
    }

  render() {
    return (
      <div>
        count - {this.state.count}
        <button onClick={()=> this.incrementFive()}>Increment</button>
      </div>
    )
  }
}

export default Counter

destructuring props and state
*****************************
import React from 'react'
//const Greet = ({name,project}) => {
    const Greet = props =>{
       const{name, project} = props
    return <h1> Hello {name}, working on project {project}</h1>
}
export default Greet

EVENT HANDLING
==============
onClick
-------
functional component
--------------------
import React from 'react'
function ClickFunction() {
    function clickhander(){
        alert("clicked");
    }
  return (<div><button onClick={clickhander}>Click</button></div>)}
export default ClickFunction

class component
----------------
import React, { Component } from 'react'
class ClassClick extends Component {
    classclickhandler(){
        alert('clicked');
    }
  render() {
    return (
      <div>
        <button onClick={this.classclickhandler}>Click</button>
      </div>
    )
  }
}
export default ClassClick

BINDING EVENT HANDLERS
======================

import React, { Component, useState } from 'react'
class EventBind extends Component {
constructor(props) {
  super(props)
  this.state = {
     message: 'Hello user'
  }
  //this.eventhandler = this.eventhandler.bind(this)
}
//eventhandler(){
  //  this.setState({
    //    message: 'good bye user'  
    //})
    //console.log('dfasdf');
//}
eventhandler = () =>{
    this.setState({
        message: 'Good bye!'
    })
}
  render() {
    return (
      <div>
        <div>{this.state.message}</div>
        {/*<button onClick={this.eventhandler.bind(this)}>Click</button>*/}
        {/*<button onClick={()=> this.eventhandler()}>Click</button>*/}
        <button onClick={this.eventhandler}>Click</button>
      </div>
    )
  }
}
export default EventBind

METHOD AS PROPS
===============
import React, { Component } from 'react'
import ChildComponent from './ChildComponent'
class ParentComponent extends Component {
    constructor(props) {
      super(props)
      this.state = {
         parentName: 'Parent'
      }
      this.greetParent = this.greetParent.bind(this)
    }
    //greetParent(){
       // alert(`Hello ${this.state.parentName}`)
    //}
    greetParent(childName){
        alert(`Hello ${this.state.parentName} from ${childName}`)
    }
  render() {
    return (
      <div>
        <ChildComponent greetHandler={this.greetParent}/>
      </div>
    )
  }
}
export default ParentComponent

import React from 'react'
function ChildComponent(props) {
  return (
    <div>
     {/* <div><button onClick={props.greetHandler}>Greet Parent</button></div> */}
     <div><button onClick={()=>props.greetHandler('Child')}>Greet Parent</button></div>
    </div>
  )
}
export default ChildComponent

CONDITIONAL RENDERING
=====================

import React, { Component } from 'react'

class UserGreeting extends Component {
    constructor(props) {
      super(props)
    
      this.state = {
         isLoggedIn: false
      }
    }
    
  render() {
    
    //first way
    //using if else condition
    //if(this.state.isLoggedIn){
       // return <div>Welcome madhu</div>
    //}else{
        //return <div>Welcome Guest</div>
    //}

    //second way
    //using variable
    //let message
    //if(this.state.isLoggedIn){
      //  message = <div>Welcome madhu</div>
    //}else{
      //  message = <div>Welcome Guest</div>
    //}
    //return <div>{message}</div>

    //third way
    //mostly used
    //ternary operator
    //return this.state.isLoggedIn?(<div>Welcome madhu</div>):(<div>Welcome Guest</div>)

    //fourth way
    //only true condition rendering
    //short circuit operator
    return this.state.isLoggedIn && <div>Welcome madhu</div>

  }
}

export default UserGreeting

LIST RENDERING
==============
within single component
-----------------------
import React from 'react'

function NamesList() {
//first & second & third
//const name = ['madhu','praneeth','srinivas']
const persons = [
    {name: 'madhu', age: '29', lang: 'Java'},
    {name: 'praneeth', age: '30', lang: 'SB'},
    {name: 'srinivas', age: '27', lang: 'React'},
]

//third way
//const namesList = names.map(name => <h2>{name}</h2>)

//fourth way
const personsList = persons.map(person => 
    <div><h2>Iam {person.name}, my age is  {person.age} , I know  {person.lang}</h2> </div>
)

  return (
    <div>
    {/** Normal Rendering
      <h4>{names[0]}</h4>
      <h5>{names[1]}</h5>
      <h6>{names[2]}</h6>
       */}

       {/**second way
     {
        names.map(name => <h2>{name}</h2>)
       }
    */}
      
    {/*third way*/}
    {/*{namesList}*/}

{/*fourth way*/}
{ personsList }


    </div>
  )
}

export default NamesList

within morethan a component
---------------------------
import React from 'react'
function Person({ person }) {
    return (
        <div>
            <h2>Iam {person.name}, my age is  {person.age} , I know  {person.lang}</h2>
        </div>
    )
}
export default Person

import React from 'react'
import Person from './Person'
function NamesList() {
    const persons = [
        { name: 'madhu', age: '29', lang: 'Java' },
        { name: 'praneeth', age: '30', lang: 'SB' },
        { name: 'srinivas', age: '27', lang: 'React' },
    ]
    const personsList = persons.map(person =>
        <Person person={person} />
    )
    return (
        <div>{personsList}</div>
    )
}
export default NamesList

LIST AND KEYS
=============
=> A 'key' is a special string attribute you need to include when creating lists of elements.
=> Keys give the elements a stable identity.
=> Keys help React identify which items have changed, are added, or are removed.
=> Help in efficient update of the user interface.

if your list have unique values
-------------------------------
 const personsList = persons.map(person =>
        <Person key={person.name} person={person} />
    )

if your list have not any key values
-------------------------------------
 const personsList = persons.map((person, index) =>
        <Person key={index} person={person} />
    )

When to use index as key?
-------------------------
1. The items in your list do not have a unique id.
2. The list is a static list and will not change.
3. The list will never be ordered or filtered.


STYLING AND CSS
===============
1. CSS Stylesheets
2. Inline styling
3. CSS Module
4. CSS in JS Libraries

1. CSS Stylesheets
-------------------
/*first and second*/
.primary{
    color: orange;
}
.font-xl{
    font-size: 72px;
}

import React from 'react'
import './myStyle.css'
function Stylesheet(props) {
    let className = props.primary ? 'primary' : ''
    return (
        <div>
            {/**first way */}
            {/**<h1 className='primary'>My Style in react</h1> */}

            {/**second way */}
            <h1 className={`${className} font-xl`}>My Style in react</h1>
        </div>
    )
}
export default Stylesheet

import './App.css';
import Stylesheet from './components/Stylesheet';
function App() {
  return (
    <div className="App">
      {/**first way */}
      {/**<Stylesheet/> */}

      {/**second way */}
      {/**true means styles applies other wise not */}
      <Stylesheet primary={true} />

    </div>
  );
}
export default App;


2. Inline styling
-----------------
import './App.css'; 
import Inline from './components/Inline';
function App() {
  return (
    <div className="App">
      <Inline/>
    </div>
  );
}
export default App;























